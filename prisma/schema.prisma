generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "postgresql"
  // url      = env("DATABASE_URL")
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// 定义表模型
model Tasks {
  id             Int      @id @default(autoincrement())
  title          String?  @db.VarChar(100) // 任务标题
  salary         String?  @db.VarChar(100) // 任务薪资
  position       String?  @db.VarChar(100) // 任务职位
  staffnum       String?  @db.VarChar(100) // 员工人数
  isIgnorePassed Boolean? @default(true) // 是否忽略已投递记录

  filteredKeywords FilteredCompanyKeywords[] // 过滤公司关键字的关系
  oid              String                    @default("") @db.VarChar(100) // 默认值为空字符串
  search           Search[] // 搜索结果的关系
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt

  // 定义主键
  @@map(name: "tasks")
}

// 定义过滤公司关键字表
model FilteredCompanyKeywords {
  id      Int    @id @default(autoincrement())
  keyword String // 需要过滤的公司关键字
  taskId  Int // 关联的任务ID

  task Tasks @relation(fields: [taskId], references: [id]) // 定义关系

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 确保 taskId 和 keyword 的组合唯一
  @@unique([taskId, keyword])
  // 定义主键
  @@map(name: "filtered_company_keywords")
}

// 定义搜索表
model Search {
  id       Int    @id @default(autoincrement())
  md5      String @db.VarChar(32) // MD5 哈希值通常为 32 个字符
  position String @db.VarChar(100) // 职位名称，假设最大长度为 100 个字符
  salary   String @db.VarChar(50) // 薪资信息，假设最大长度为 50 个字符
  company  String @db.VarChar(100) // 公司名称，假设最大长度为 100 个字符
  scale    String @db.VarChar(50) // 公司规模，假设最大长度为 50 个字符

  whiteInfo String?  @db.VarChar(50) //  
  blackInfo String?  @db.VarChar(50) //  
  errDesc   String?  @db.VarChar(50) // 错误描述
  isCanPost Boolean? // 是否可以投递
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  taskId Int // 关联的任务ID

  oid String @default("") // oauth2 relative ID

  autoThreadNo String @default("") @db.VarChar(32) // 本次执行编号

  task Tasks @relation(fields: [taskId], references: [id]) // 定义关系

  // 确保 taskId 和 md5 的组合唯一
  @@unique([taskId, md5])
  // 定义主键
  @@map(name: "search")
}

model Users {
  id             Int      @id @default(autoincrement())
  userId         String   @unique @db.VarChar(50) // Clerk 的用户 ID
  dId            String?  @unique @db.VarChar(50) // 分销商ID
  email          String   @unique @db.VarChar(128)
  username       String?  @db.VarChar(128) // 允许用户名为空
  passwordHash   String?  @db.VarChar(128) // 存储密码的哈希值
  points         Int      @default(0) // 积分数量，默认为 0
  isVip          Boolean  @default(false) // 是否为 VIP 用户，默认为 false
  isSuperUser    Boolean  @default(false) // 是否为超级用户，默认为 false
  roleId         Int      @default(1) // 角色 ID，默认为 0 表示超级管理员 1 表示普通用户 2 表示员工 3 表示分销商
  // isStaff        Boolean  @default(false) // 是否为员工，默认为 false
  isDistributor  Boolean  @default(false) // 是否为分销商，默认为 false
  isActive       Boolean  @default(true) // 激活状态，默认为 true
  additionalInfo String? // 额外信息，使用可选字段
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([email]) // 单字段索引
  @@index([userId]) // 单字段索引
}
