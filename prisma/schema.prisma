generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "postgresql"
  // url      = env("DATABASE_URL")
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// 定义表模型
model Tasks {
  id               Int                        @id @default(autoincrement())
  title            String?                    @db.VarChar(100) // 任务标题
  salary           String?                    @db.VarChar(100) // 任务薪资
  searchText       String?                    @default("") @db.VarChar(100) // 任务职位
  staffnum         String?                    @db.VarChar(100) // 员工人数
  isIgnorePassed   Boolean?                   @default(true) // 是否忽略已投递记录
  positionKeywords FilteredPositionKeywords[] //  职位关键字
  filteredKeywords FilteredCompanyKeywords[] // 过滤公司关键字
  passCompanys     FilterPassCompanys[] // 过滤已递公司
  oid              String?                    @default("") @db.VarChar(100) // 默认值为空字符串
  search           Search[] // 搜索结果的关系
  createdAt        DateTime                   @default(now())
  updatedAt        DateTime                   @updatedAt
  userId           String                     @db.VarChar(64) // 用户 ID
  cityCode         String                     @default("") @db.VarChar(20) // 城市代码
  cityName         String                     @default("") @db.VarChar(20) // 城市名称
  maxCount         Int?                       @default(100) // 最大投递次数
  bossOnlineCheck  Boolean                    @default(false) // 过滤非在线HR
  activeCheck      Boolean                    @default(false) // 过滤非活跃HR
  headhunterCheck  Boolean                    @default(false) // 过滤猎头

  experienceValue String? @default("0") @db.VarChar(100) // 经验要求
  degreeValue     String? @default("0") @db.VarChar(100) // 学历要求
  salaryValue     String? @default("0") @db.VarChar(80) // 薪资要求
  scaleValue      String? @default("0") @db.VarChar(100) // 公司规模要求

  greetingGroupId Int? // 欢迎语组ID

  GreetingGroup GreetingGroup? @relation(fields: [greetingGroupId], references: [id]) // 定义关系

  // 定义主键
  @@map(name: "tasks")
}

// 定义过滤职位关键字表
model FilterPassCompanys {
  id      Int    @id @default(autoincrement())
  keyword String
  taskId  Int // 关联的任务ID

  task Tasks @relation(fields: [taskId], references: [id]) // 定义关系

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.VarChar(64) // 用户 ID

  // 定义主键
  @@map(name: "filtered_pass_conpanys")
}

// 定义过滤职位关键字表
model FilteredCompanyKeywords {
  id      Int    @id @default(autoincrement())
  keyword String // 需要过滤的公司关键字
  taskId  Int // 关联的任务ID

  task Tasks @relation(fields: [taskId], references: [id]) // 定义关系

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.VarChar(64) // 用户 ID

  // 定义主键
  @@map(name: "filtered_company_keywords")
}

// 定义过滤公司关键字表
model FilteredPositionKeywords {
  id      Int    @id @default(autoincrement())
  keyword String // 需要过滤的公司关键字
  taskId  Int // 关联的任务ID

  task Tasks @relation(fields: [taskId], references: [id]) // 定义关系

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.VarChar(64) // 用户 ID

  // 定义主键
  @@map(name: "filtered_position_keywords")
}

// 定义搜索表
model Search {
  id        Int      @id @default(autoincrement())
  md5       String   @db.VarChar(32) // position+company 组成的MD5 哈希值通常为 32 个字符
  position  String   @db.VarChar(100) // 职位名称，假设最大长度为 100 个字符
  salary    String   @db.VarChar(50) // 薪资信息，假设最大长度为 50 个字符
  company   String   @db.VarChar(100) // 公司名称，假设最大长度为 100 个字符
  scale     String   @db.VarChar(50) // 公司规模，假设最大长度为 50 个字符
  descText  String?  @db.Text // 描述信息，假设最大长度为 200 个字符
  whiteInfo String?  @db.VarChar(200) //  
  blackInfo String?  @db.VarChar(200) //  
  errDesc   String?  @db.VarChar(200) // 错误描述
  isCanPost Boolean? // 是否可以投递
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  costPoint Int? @default(1) // 消耗积分

  taskId Int // 关联的任务ID

  userId String @db.VarChar(50) // oauth2 relative ID

  autoThreadNo String @default("") @db.VarChar(32) // 本次执行编号

  task Tasks @relation(fields: [taskId], references: [id]) // 定义关系
  // Tasks   Tasks? @relation(fields: [tasksId], references: [id])
  // Tasks Tasks? @relation(fields: [taskId], references: [id])

  // 确保 taskId 和 md5 的组合唯一
  // @@unique([taskId, md5])
  // 定义主键
  @@map(name: "search")
}

model Users {
  id             Int       @id @default(autoincrement())
  userId         String    @unique @db.VarChar(50) // Clerk 的用户 ID
  email          String    @unique @db.VarChar(128)
  dId            String?   @unique @db.VarChar(50) // 分销商ID
  userName       String?   @db.VarChar(128) // 允许用户名为空
  firstName      String?   @db.VarChar(128) // 允许名为空
  lastName       String?   @db.VarChar(128)
  fullName       String?   @db.VarChar(128) // 允许全名为空
  avatar         String?   @db.VarChar(256) // 头像 URL
  passwordHash   String?   @db.VarChar(128) // 存储密码的哈希值
  additionalInfo String? // 额外信息，使用可选字段
  points         Int       @default(0) // 积分数量，默认为 0
  cardStartTime  DateTime? // 卡密开始时间
  cardEndTime    DateTime? // 卡密结束时间
  isVip          Boolean   @default(false) // 是否为 VIP 用户，默认为 false
  isSuperUser    Boolean   @default(false) // 是否为超级用户，默认为 false
  roleId         Int       @default(1) // 角色 ID，默认为 0 表示超级管理员 1 表示普通用户 2 表示员工 3 表示分销商
  // isStaff        Boolean  @default(false) // 是否为员工，默认为 false
  isDistributor  Boolean   @default(false) // 是否为分销商，默认为 false
  isActive       Boolean   @default(true) // 激活状态，默认为 true
  isAbnormal     Boolean   @default(false) // 异常状态，默认为 false, 用于标记异常用户
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  // UserCards      UserCards[]

  greetings Greetings[]

  @@index([email]) // 单字段索引
  @@index([userId]) // 单字段索引
}

model Cards {
  id            Int       @id @default(autoincrement())
  title         String    @db.VarChar(100) // 卡密标题
  code          String    @unique @db.VarChar(50) // 卡密，唯一
  type          CardType // 卡密类型
  price         Float     @default(0) // 卡密价格，默认为 0
  value         Int // 对于日卡、月卡、年卡，存储天数或月份；对于积分，存储积分点数
  cardStartTime DateTime? // 卡密开始时间
  cardEndTime   DateTime? // 卡密结束时间
  createdBy     String    @db.VarChar(64) // 创建者 ID
  isActive      Boolean   @default(true) // 是否激活
  isRedeemed    Boolean   @default(false) // 是否已核销
  createdAt     DateTime  @default(now()) // 创建时间
  updatedAt     DateTime  @updatedAt // 更新时间
  redeemedAt    DateTime? // 核销时间（可选）
  distributorId Int? // 发行分销商的 ID
  onlyOneTime   Boolean   @default(false) // 是否只能购买一次，默认为 false
  redeemedBy    String?   @db.VarChar(64) // 核销者 ID
  cardTypesId   Int       @default(1) // 卡密类型 ID
  cardTypes     CardTypes @relation(fields: [cardTypesId], references: [id]) // 与 CardTypes 的一对一关系
  // userCard      UserCards? @relation(fields: [code], references: [cardCode]) // 与 UserCards 的一对一关系
  // UserCards     UserCards[]
  // UserCards     UserCards[]
}

model CardTypes {
  id               Int      @id @default(autoincrement())
  name             String   @db.VarChar(50) // 卡密类型名称
  type             CardType @default(POINTS)
  price            Float    @default(0) // 卡密价格，默认为 0
  cValue           Int      @default(0) // 卡密价值，默认为 0
  desc             String?  @db.VarChar(100) // 卡密类型描述
  rebate           Float?   @default(0) // 返点比例，默认为 null
  onlyOneTime      Boolean  @default(false) // 是否只能购买一次，默认为 false
  isCanDistributor Boolean  @default(false) // 是否可以分销，默认为 false  
  createdAt        DateTime @default(now()) // 创建时间
  updatedAt        DateTime @updatedAt // 更新时间
  Cards            Cards[]
  userId           String?  @db.VarChar(64) // 用户 ID
}

// [
//   {
//     label: "日卡",
//     value: "DAILY",
//   },
//   {
//     label: "月卡",
//     value: "MONTHLY",
//   },
//   {
//     label: "季卡",
//     value: "QUARTERLY",
//   },
//   {
//     label: "半年卡",
//     value: "HALF_YEARLY",
//   },
//   {
//     label: "年卡",
//     value: "YEARLY",
//   },
//   {
//     label: "点卡",
//     value: "POINTS",
//   },
// ];
enum CardType {
  DAILY
  MONTHLY
  QUARTERLY
  HALF_YEARLY
  YEARLY
  POINTS
}

// model UserCards {
//   id         Int       @id @default(autoincrement())
//   userId     String    @db.VarChar(50) // 用户 ID
//   cardCode   String    @unique @db.VarChar(50) // 卡密（与 Cards.code 关联）
//   redeemed   Boolean   @default(false) // 是否已核销
//   redeemedAt DateTime? // 核销时间（可选）
//   User       Users     @relation(fields: [userId], references: [userId])
//   createdAt  DateTime  @default(now()) // 创建时间
//   updatedAt  DateTime  @updatedAt // 更新时间
//   // Cards      Cards?    @relation(fields: [cardsId], references: [id])
//   // cardsId    Int?
// }
enum GreetingsType {
  ACTICE
  DEACTIVE
}

model Greetings {
  id      Int           @id @default(autoincrement())
  content String        @db.VarChar(200) // 创建内容
  status  GreetingsType // 创建状态

  userId    String   @db.VarChar(64) // 创建者 ID
  createdAt DateTime @default(now()) // 创建时间
  updatedAt DateTime @updatedAt // 更新时间

  Users           Users?        @relation(fields: [userId], references: [userId])
  GreetingGroup   GreetingGroup @relation(fields: [greetingGroupId], references: [id])
  greetingGroupId Int
}

model GreetingGroup {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100) // 创建内容
  userId    String?  @db.VarChar(64) // 创建者 ID
  createdAt DateTime @default(now()) // 创建时间
  updatedAt DateTime @updatedAt // 更新时间

  greetings Greetings[]
  Tasks     Tasks[]
}

model City {
  id         Int     @id @default(autoincrement())
  firstChar  String? @default("") @db.VarChar(10)
  code       String  @db.VarChar(20)
  name       String  @db.VarChar(20)
  cityCode   String  @db.VarChar(20)
  regionCode String  @db.VarChar(20)
  from       String  @db.VarChar(20)
  pinyin     String  @db.VarChar(100)

  @@unique([code, from]) // 设置 code 和 from 的唯一约束
}
